/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "ScillApiWrapper/ScillApiBaseModel.h"

namespace ScillSDK 
{

class SCILLSDK_API ScillApiAuthApi
{
public:
	ScillApiAuthApi();
	~ScillApiAuthApi();

	void SetURL(const FString& Url);
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	class GenerateAccessTokenRequest;
	class GenerateAccessTokenResponse;
	class GetUserBattlePassNotificationTopicRequest;
	class GetUserBattlePassNotificationTopicResponse;
	class GetUserChallengeNotificationTopicRequest;
	class GetUserChallengeNotificationTopicResponse;
	class GetUserChallengesNotificationTopicRequest;
	class GetUserChallengesNotificationTopicResponse;
	
    DECLARE_DELEGATE_OneParam(FGenerateAccessTokenDelegate, const GenerateAccessTokenResponse&);
    DECLARE_DELEGATE_OneParam(FGetUserBattlePassNotificationTopicDelegate, const GetUserBattlePassNotificationTopicResponse&);
    DECLARE_DELEGATE_OneParam(FGetUserChallengeNotificationTopicDelegate, const GetUserChallengeNotificationTopicResponse&);
    DECLARE_DELEGATE_OneParam(FGetUserChallengesNotificationTopicDelegate, const GetUserChallengesNotificationTopicResponse&);
    
    bool GenerateAccessToken(const GenerateAccessTokenRequest& Request, const FGenerateAccessTokenDelegate& Delegate = FGenerateAccessTokenDelegate()) const;
    bool GetUserBattlePassNotificationTopic(const GetUserBattlePassNotificationTopicRequest& Request, const FGetUserBattlePassNotificationTopicDelegate& Delegate = FGetUserBattlePassNotificationTopicDelegate()) const;
    bool GetUserChallengeNotificationTopic(const GetUserChallengeNotificationTopicRequest& Request, const FGetUserChallengeNotificationTopicDelegate& Delegate = FGetUserChallengeNotificationTopicDelegate()) const;
    bool GetUserChallengesNotificationTopic(const GetUserChallengesNotificationTopicRequest& Request, const FGetUserChallengesNotificationTopicDelegate& Delegate = FGetUserChallengesNotificationTopicDelegate()) const;
    
private:
    void OnGenerateAccessTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGenerateAccessTokenDelegate Delegate) const;
    void OnGetUserBattlePassNotificationTopicResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserBattlePassNotificationTopicDelegate Delegate) const;
    void OnGetUserChallengeNotificationTopicResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserChallengeNotificationTopicDelegate Delegate) const;
    void OnGetUserChallengesNotificationTopicResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserChallengesNotificationTopicDelegate Delegate) const;
    
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
};
	
}
